// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BenchmarkService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Benchmark.Grpc.Common {
  public static class BenchmarkService
  {
    static readonly string __ServiceName = "BenchmarkService";

    static readonly Marshaller<global::Benchmark.Grpc.Common.ServiceRequest> __Marshaller_ServiceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Benchmark.Grpc.Common.ServiceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Benchmark.Grpc.Common.ServiceResponse> __Marshaller_ServiceResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Benchmark.Grpc.Common.ServiceResponse.Parser.ParseFrom);

    static readonly Method<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> __Method_Operation = new Method<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse>(
        MethodType.Unary,
        __ServiceName,
        "Operation",
        __Marshaller_ServiceRequest,
        __Marshaller_ServiceResponse);

    static readonly Method<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> __Method_OperationStream = new Method<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "OperationStream",
        __Marshaller_ServiceRequest,
        __Marshaller_ServiceResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Benchmark.Grpc.Common.Proto.BenchmarkService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBenchmarkServiceClient
    {
      global::Benchmark.Grpc.Common.ServiceResponse Operation(global::Benchmark.Grpc.Common.ServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Benchmark.Grpc.Common.ServiceResponse Operation(global::Benchmark.Grpc.Common.ServiceRequest request, CallOptions options);
      AsyncUnaryCall<global::Benchmark.Grpc.Common.ServiceResponse> OperationAsync(global::Benchmark.Grpc.Common.ServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Benchmark.Grpc.Common.ServiceResponse> OperationAsync(global::Benchmark.Grpc.Common.ServiceRequest request, CallOptions options);
      AsyncDuplexStreamingCall<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> OperationStream(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncDuplexStreamingCall<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> OperationStream(CallOptions options);
    }

    // server-side interface
    public interface IBenchmarkService
    {
      Task<global::Benchmark.Grpc.Common.ServiceResponse> Operation(global::Benchmark.Grpc.Common.ServiceRequest request, ServerCallContext context);
      Task OperationStream(IAsyncStreamReader<global::Benchmark.Grpc.Common.ServiceRequest> requestStream, IServerStreamWriter<global::Benchmark.Grpc.Common.ServiceResponse> responseStream, ServerCallContext context);
    }

    // client stub
    public class BenchmarkServiceClient : ClientBase, IBenchmarkServiceClient
    {
      public BenchmarkServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Benchmark.Grpc.Common.ServiceResponse Operation(global::Benchmark.Grpc.Common.ServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Operation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Benchmark.Grpc.Common.ServiceResponse Operation(global::Benchmark.Grpc.Common.ServiceRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Operation, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Benchmark.Grpc.Common.ServiceResponse> OperationAsync(global::Benchmark.Grpc.Common.ServiceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Operation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Benchmark.Grpc.Common.ServiceResponse> OperationAsync(global::Benchmark.Grpc.Common.ServiceRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Operation, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncDuplexStreamingCall<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> OperationStream(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_OperationStream, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncDuplexStreamingCall(call);
      }
      public AsyncDuplexStreamingCall<global::Benchmark.Grpc.Common.ServiceRequest, global::Benchmark.Grpc.Common.ServiceResponse> OperationStream(CallOptions options)
      {
        var call = CreateCall(__Method_OperationStream, options);
        return Calls.AsyncDuplexStreamingCall(call);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBenchmarkService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Operation, serviceImpl.Operation)
          .AddMethod(__Method_OperationStream, serviceImpl.OperationStream).Build();
    }

    // creates a new client
    public static BenchmarkServiceClient NewClient(Channel channel)
    {
      return new BenchmarkServiceClient(channel);
    }

  }
}
#endregion
