// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameAdminService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Demo.Common.ServiceDefinition {

  namespace Proto {

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class GameAdminService {

      #region Descriptor
      public static pbr::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbr::FileDescriptor descriptor;

      static GameAdminService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChZHYW1lQWRtaW5TZXJ2aWNlLnByb3RvIiMKDkFjY291bnRSZXF1ZXN0EhEK", 
              "CWFjY291bnRJZBgBIAEoBSJECgdBY2NvdW50EgoKAmlkGAEgASgFEg0KBWVt", 
              "YWlsGAIgASgJEh4KCmNoYXJhY3RlcnMYAyADKAsyCi5DaGFyYWN0ZXIiJQoJ", 
              "Q2hhcmFjdGVyEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkiJwoSQ2hhdE1l", 
              "c3NhZ2VSZXF1ZXN0EhEKCWFjY291bnRJZBgBIAEoBSJJCgtDaGF0TWVzc2Fn", 
              "ZRITCgtjaGFyYWN0ZXJJZBgBIAEoBRIUCgx0aW1lc3RhbXBVdGMYAiABKAMS", 
              "DwoHbWVzc2FnZRgDIAEoCSJOChVDaGF0TWVzc2FnZUNvbGxlY3Rpb24SEQoJ", 
              "YWNjb3VudElkGAEgASgFEiIKDGNoYXRNZXNzYWdlcxgCIAMoCzIMLkNoYXRN", 
              "ZXNzYWdlMt8BChBHYW1lQWRtaW5TZXJ2aWNlEikKCkdldEFjY291bnQSDy5B", 
              "Y2NvdW50UmVxdWVzdBoILkFjY291bnQiABJBCg5HZXRDaGF0SGlzdG9yeRIT", 
              "LkNoYXRNZXNzYWdlUmVxdWVzdBoWLkNoYXRNZXNzYWdlQ29sbGVjdGlvbiIA", 
              "KAESMwoKTGlzdGVuQ2hhdBITLkNoYXRNZXNzYWdlUmVxdWVzdBoMLkNoYXRN", 
              "ZXNzYWdlIgAwARIoCgRDaGF0EgwuQ2hhdE1lc3NhZ2UaDC5DaGF0TWVzc2Fn", 
              "ZSIAKAEwAUIgqgIdRGVtby5Db21tb24uU2VydmljZURlZmluaXRpb25iBnBy", 
              "b3RvMw=="));
        descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.AccountRequest), new[]{ "AccountId" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.Account), new[]{ "Id", "Email", "Characters" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.Character), new[]{ "Id", "Name" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.ChatMessageRequest), new[]{ "AccountId" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.ChatMessage), new[]{ "CharacterId", "TimestampUtc", "Message" }, null, null, null),
              new pbr::GeneratedCodeInfo(typeof(global::Demo.Common.ServiceDefinition.ChatMessageCollection), new[]{ "AccountId", "ChatMessages" }, null, null, null)
            }));
      }
      #endregion

    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AccountRequest : pb::IMessage<AccountRequest> {
    private static readonly pb::MessageParser<AccountRequest> _parser = new pb::MessageParser<AccountRequest>(() => new AccountRequest());
    public static pb::MessageParser<AccountRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AccountRequest(AccountRequest other) : this() {
      accountId_ = other.accountId_;
    }

    public AccountRequest Clone() {
      return new AccountRequest(this);
    }

    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AccountRequest);
    }

    public bool Equals(AccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      return size;
    }

    public void MergeFrom(AccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Account(Account other) : this() {
      id_ = other.id_;
      email_ = other.email_;
      characters_ = other.characters_.Clone();
    }

    public Account Clone() {
      return new Account(this);
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int EmailFieldNumber = 2;
    private string email_ = "";
    public string Email {
      get { return email_; }
      set {
        email_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CharactersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Demo.Common.ServiceDefinition.Character> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(26, global::Demo.Common.ServiceDefinition.Character.Parser);
    private readonly pbc::RepeatedField<global::Demo.Common.ServiceDefinition.Character> characters_ = new pbc::RepeatedField<global::Demo.Common.ServiceDefinition.Character>();
    public pbc::RepeatedField<global::Demo.Common.ServiceDefinition.Character> Characters {
      get { return characters_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Email != other.Email) return false;
      if(!characters_.Equals(other.characters_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= characters_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      return size;
    }

    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      characters_.Add(other.characters_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Character : pb::IMessage<Character> {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Character(Character other) : this() {
      id_ = other.id_;
      name_ = other.name_;
    }

    public Character Clone() {
      return new Character(this);
    }

    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChatMessageRequest : pb::IMessage<ChatMessageRequest> {
    private static readonly pb::MessageParser<ChatMessageRequest> _parser = new pb::MessageParser<ChatMessageRequest>(() => new ChatMessageRequest());
    public static pb::MessageParser<ChatMessageRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChatMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChatMessageRequest(ChatMessageRequest other) : this() {
      accountId_ = other.accountId_;
    }

    public ChatMessageRequest Clone() {
      return new ChatMessageRequest(this);
    }

    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ChatMessageRequest);
    }

    public bool Equals(ChatMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      return size;
    }

    public void MergeFrom(ChatMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChatMessage(ChatMessage other) : this() {
      characterId_ = other.characterId_;
      timestampUtc_ = other.timestampUtc_;
      message_ = other.message_;
    }

    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    public const int CharacterIdFieldNumber = 1;
    private int characterId_;
    public int CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    public const int TimestampUtcFieldNumber = 2;
    private long timestampUtc_;
    public long TimestampUtc {
      get { return timestampUtc_; }
      set {
        timestampUtc_ = value;
      }
    }

    public const int MessageFieldNumber = 3;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterId != other.CharacterId) return false;
      if (TimestampUtc != other.TimestampUtc) return false;
      if (Message != other.Message) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CharacterId != 0) hash ^= CharacterId.GetHashCode();
      if (TimestampUtc != 0L) hash ^= TimestampUtc.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CharacterId);
      }
      if (TimestampUtc != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimestampUtc);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterId);
      }
      if (TimestampUtc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampUtc);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.CharacterId != 0) {
        CharacterId = other.CharacterId;
      }
      if (other.TimestampUtc != 0L) {
        TimestampUtc = other.TimestampUtc;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterId = input.ReadInt32();
            break;
          }
          case 16: {
            TimestampUtc = input.ReadInt64();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChatMessageCollection : pb::IMessage<ChatMessageCollection> {
    private static readonly pb::MessageParser<ChatMessageCollection> _parser = new pb::MessageParser<ChatMessageCollection>(() => new ChatMessageCollection());
    public static pb::MessageParser<ChatMessageCollection> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Demo.Common.ServiceDefinition.Proto.GameAdminService.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChatMessageCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChatMessageCollection(ChatMessageCollection other) : this() {
      accountId_ = other.accountId_;
      chatMessages_ = other.chatMessages_.Clone();
    }

    public ChatMessageCollection Clone() {
      return new ChatMessageCollection(this);
    }

    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    public const int ChatMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Demo.Common.ServiceDefinition.ChatMessage> _repeated_chatMessages_codec
        = pb::FieldCodec.ForMessage(18, global::Demo.Common.ServiceDefinition.ChatMessage.Parser);
    private readonly pbc::RepeatedField<global::Demo.Common.ServiceDefinition.ChatMessage> chatMessages_ = new pbc::RepeatedField<global::Demo.Common.ServiceDefinition.ChatMessage>();
    public pbc::RepeatedField<global::Demo.Common.ServiceDefinition.ChatMessage> ChatMessages {
      get { return chatMessages_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ChatMessageCollection);
    }

    public bool Equals(ChatMessageCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if(!chatMessages_.Equals(other.chatMessages_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      hash ^= chatMessages_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      chatMessages_.WriteTo(output, _repeated_chatMessages_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      size += chatMessages_.CalculateSize(_repeated_chatMessages_codec);
      return size;
    }

    public void MergeFrom(ChatMessageCollection other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      chatMessages_.Add(other.chatMessages_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 18: {
            chatMessages_.AddEntriesFrom(input, _repeated_chatMessages_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
